1장
{
컴퓨터 그래픽을 만들기 위한
모델링, 리깅, 애니메이팅, 렌더링, 포스트 프로세싱 단계를 간단히 설명한다

해당 강의는 실시간 렌더링 기술을중점으로 설명한다 한다
}



2장
{
orthonormal standard basis
두 단위벡터 e1과 e2가 서로 axis 1축의 원소만을 가질 때
ex) e1은 x축, e2는 y축 값만을 가진다

non-orthonormal non-standard
두 단위벡터 e1과 e2가 서로 직교 상태가 아닐 때 두 벡터 관계를 뜻한다

orthonormal non-standard
두 단위벡터 e1과 e2가 서로 직교 상태일 때 두 벡터 관계를 뜻한다


내적 특징에 대해 설명한다

두 단위벡터가 서로
직각이면 내적값은 0이 된다
예각이면 내적값은 +0.n이 된다
둔각이면 내적값은 -0.n이 된다


외적 특징에 대해 설명한다

오른손 법칙으로 법선벡터의 방향을 알 수 있다
인풋을 v1,v2로 한다면
손 바닥이 v1, 손가락이 v2에 위치했을 때 엄지손가락이 가리키는 방향이 법선 벡터 방향이다


line, ray, linear interpolation 즉 선형보간에 대해 설명한다
p0과 p1 사이의 값을 선형보간하는 방법에 대해 설명한다
}



11장
{
키프레임 애니메이션과 키 데이터를 그래프로 표현하는 방법에 대해 설명한다

선형보간을 이용해 회전을 보간하면 생기는 문제에 대해 알려준다

쿼터니언을 이용해 3차원 벡터를 회전하는 방법에 대해 설명해준다
먼저 회전하고자 하는 position을 쿼터니언으로 만들어준다
쿼터니언의 i,j,k 부분은 position의 x, y, z로 채운다 = p
이후 회전시키고자 하는 축과 각도로 쿼터니언을 만들어준다
이때 축의 x, y, z는 쿼터니언의 i, j, k에 넣고(필히 단위벡터여야 된다)
회전하고자 하는 각도는 쿼터니언의 w에 넣어 쿼터니언을 만든다 = q
이후 p와 q 쿼터니언을 곱해 새로운 쿼터니언을 만들고
*q를 또 곱해 나온 쿼터니언의 i, j, k 부분이
특정 축으로 회전한 position 벡터 값이 된다

spherical linear interpolation 계산 방법을 알려줌
sin(pi*(1-t)) / sin(pi) * p + sin(pi*t) / sin(pi) * q
아래 공식에서 t는 가변 pㅇ하 q 사이를 뜻하는 가변인자다

쿼터니언을 4x4 행렬로 만드는 방법에 대해 설명해줌

회전을 표현하는 쿼터니언 = q = (qx, qy, qz, qw)

1 - 2 * (power(qy,2)+power(qz,2))      2(qx * qy - qw * qz)                   2 * (qx * qz + qw * qy)                 0
2 * (qx * qy + qw * qz)                1-2 * (power(qx,2) + power(qz,2))      2 * (qy * qz - qw * qx)                 0
2 * (qx * qz - qw * qy)                2 * (qy * qz + qw * qx)                1 - 2 * (power(qx,2) + power(qy,2))     0
0                                      0                                      0                                       1

위 행렬로 쿼터니언을 4x4 행렬로 만들 수 있다
이를 이용해 transforms matrix를 만들면 된다
}
